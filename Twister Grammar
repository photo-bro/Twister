*** Program
program         ::= func {func}

*** Functions
function        ::= func identifier func_params {define_op type} colon func_body
func_call       ::= identifier rsqrbrack {args} lsqrbrack scolon
args            ::= (literal | identifier) {comma (literal | identifier)}
func_params     ::= lsqrbrack params rsqrbrack
func_body       ::= lbrack body return_expr rbrack

*** Statements
if_stmt         ::= if cond_exp colon expression_body {(else_stmt | else if_stmt)}
else_stmt       ::= else (expression | lbrack {expression} rbrack)
while_stmt      ::= while cond_exp : expression_body
body            ::= expression | statement | lbrack {(expression | statement)} rbrack

*** Expressions
expression      ::= (general_exp | return_exp)
return_expr     ::= ret arith_exp
arith_exp       ::= (numeric_lit | identifier | arith_exp) {arith_op (numeric_lit | identifier)}


expr            ::=  primitive | unary  
unary           ::=  (- | ~ | !) primitive | unary multiplicative
multiplicative  ::= unary mult_term
mult_term       ::= mult_op multiplicative
additive        ::= mult_term add_term
add_term        ::= add_op additve
shift           ::= add_term shift_term
shift_term      ::= shift_op shift
relation        ::= shift_term rel_term
rel_term        ::= rel_op relation
equal           ::= rel_term eq_term
eq_term         ::= eq_op equal
bitand          ::= eq_term bitand_term
bitand_term     ::= & bitand
bitexor         ::= bitand_term bitexor_term
bitexor_term    ::= ^ bitexor
bitor           ::= bitexor_term bitor_term
bitor_term      ::= | bitor
logand          ::= bitor_term logand_term
logand_term     ::= && logand
logor           ::= logand_term logor_term
logor_term      ::= || primitive
primitive       ::= literal | variable | func_call | '(' expr ')'


term            ::= primitive rest_term
rest_term       ::= multiplicative rest_term


*** Declaration + Assignment (Expressions)
general_das     ::= type assign (arith_exp | func_call)
var_das         ::= bool_das | char_das | str_das | int_das | uint_das | float_das
bool_das        ::= bool identifier assign (true | false) scolon
char_das        ::= char identifier assign char_lit scolon
string_das      ::= str identifier assign str_lit scolon
int_das         ::= int identifier assign int_lit scolon
uint_das        ::= uint identifier assign uint_lit scolon
float_das       ::= float identifier assign float_lit scolon
 
*** Literals 
literal         ::= bool_lit | char_lit | str_lit | int_lit | uint_lit | float_lit
numeric_lit     ::= int_lit | uint_lit | float_lit
bool_lit        ::= true | false
char_lit        ::= '(letter | digit)'
str_lit         ::= "{unicode}"
int_lit         ::= {-} digit {digit}
uint_lit        ::= digit {digit} (u | U)
float_lit       ::= {-} {digit} dot {digit}

*** Declarations
struct_decl     ::= def struct identifier colon lbrack params rbrack scolon
var_decl        ::= type colon identifier scolon 

*** Parameter
params          ::= param {comma param}
param           ::= type colon identifier

*** Types
type            ::= primitiveType | complexType
complexType     ::= struct
primitiveType   ::= int | uint | float | char | str | bool 

*** Operators
expr_operator   ::= logical_op | arithmetic_op 
logical_op      ::= && | || | == | != | < | > | <= | >=
arithmetic_op   ::= + | - | * | / | % | & | | | ^ | << | >>
assign_op       ::= = 
define_op       ::= =>

*** Brackets
lbrack          ::= {
rbrack          ::= }
lsqbrack        ::= [
rsqrbrack       ::= ]
lparen          ::= (
rparen          ::= )

*** Primitives
identifier      ::= (letter | _ ) { letter | digit | _ }
unicode         ::= UTF-16 unicode
letter          ::= (a-z) | (A-Z)
digit           ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
colon           ::= :
scolon          ::= ;
comma           ::= ,
dot             ::= .